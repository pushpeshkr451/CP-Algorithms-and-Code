#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left, *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

bool findPath(TreeNode* root, vector<TreeNode*>& path, int k) {
    if (!root) return false;

    path.push_back(root);

    if (root->val == k) return true;

    if (findPath(root->left, path, k) || findPath(root->right, path, k))
        return true;

    path.pop_back(); // backtrack
    return false;
}

TreeNode* lowestCommonAncestor(TreeNode* root, int p, int q) {
    vector<TreeNode*> path1, path2;

    if (!findPath(root, path1, p) || !findPath(root, path2, q))
        return NULL;

    int i = 0;
    while (i < path1.size() && i < path2.size() && path1[i] == path2[i])
        i++;

    return path1[i - 1];
}

int main() {
    /*
        Example Tree:
                3
               / \
              5   1
             / \ / \
            6  2 0  8
              / \
             7   4
    */
    TreeNode* root = new TreeNode(3);
    root->left = new TreeNode(5);
    root->right = new TreeNode(1);
    root->left->left = new TreeNode(6);
    root->left->right = new TreeNode(2);
    root->right->left = new TreeNode(0);
    root->right->right = new TreeNode(8);
    root->left->right->left = new TreeNode(7);
    root->left->right->right = new TreeNode(4);

    TreeNode* lca = lowestCommonAncestor(root, 5, 1);
    cout << "LCA of 5 and 1: " << lca->val << endl;

    return 0;
}
